<?php

namespace Saw\Thread;

abstract class Thread
{
    /**
     * @var callable Содержит код потока.
     */
    private $code;

    /**
     * @var string Уникальный идентификатор кода.
     */
    private $uniqueId;

    /**
     * @var array Аргументы, передаваемые коду (функции).
     */
    private $arguments = [];

    public function __construct(callable $code, string $uniqueId)
    {
        $this->code = $code;
        $this->uniqueId = $uniqueId;
    }

    /**
     * Назначает аргументы для функции, в которой выполняется код потока.
     *
     * @param array $arguments
     */
    public function setArguments(array $arguments)
    {
        $this->arguments = $arguments;
    }

    /**
     * Общее - тред можно:
     * 1. Создать
     * 2. Задать список аргументов
     * 3. Запустить
     * 4. Получить состояние
     * 5. Получить айдишник потока
     * 6. получить результат работы
     * 7. Остановить выполнение потока (актуально как для мультиплексирования, так и для обычного режима).
     *    В виду имеется обычный рисет. то есть, полная остановка работы потока.
     * ...
     *
     * Внутри треда можно:
     * 1. Слипнуть поток на какое то время (в буквальном смысле).
     *
     * Мультиплексирование:
     * 1. Задать операционный размер шага (кол-во операций выполняемых за 1 раз)
     * 2. Задать общий операционный размер (общее кол-во операций которое необходимо выполнить)
     * 3. Получить процент выполнения исходя из текущего шага. При неопределенном состоянии вернет -1.
     * 4. Задать приоритет по занимаемому времени выполнения в процентном соотношении
     * 5. Переключиться на поток.
     * 5.1. Назначить колбек-который вызовется при переключении на поток.
     * 6. Отключиться от потока.
     * 6.1 Назначить колбек-который вызовется при переключении с потока на другой поток.
     *
     */

    /**
     * @return string
     */
    public function getId()
    {
        return $this->uniqueId;
    }

    /**
     * Выполняет код потока.
     * @todo тут должны быть какие-нибудь исключения.
     * @todo кстати, это абстрактный метод!
     *
     * @param void
     * @return void
     */
    public function run()
    {
        try {
            call_user_func_array($this->code, $this->arguments);
        } catch (\Throwable $throwable) {
            // todo
        }
    }

    public function getCurrentState()
    {

    }

    public function getResult()
    {

    }
}
